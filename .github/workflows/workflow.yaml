name: Test
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  style:
    name: Code style check
    runs-on: ubuntu-latest
    steps:
      - name: install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'

      - name: checkout
        uses: actions/checkout@v2

      - name: run lint
        run: make lint

      - name: run format check
        run: make check

  sdk-tests:
    name: SDK tests
    runs-on: ubuntu-latest
    steps:
      - name: install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'

      - name: checkout
        uses: actions/checkout@v2

      - name: run tests
        run: make test

  build-examples:
    name: Build examples
    runs-on: ubuntu-latest
    container:
      image: tinygo/tinygo:0.18.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache built examples
        uses: actions/cache@v2
        id: cache-built-examples
        with:
          path: examples
          key: examples-${{ hashFiles('examples/**', 'proxywasm/**') }}

      - name: Install Go
        if: steps.cache-built-examples.outputs.cache-hit != 'true'
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'

      # TinyGo's release container does not have Make command.
      - name: Install Make
        if: steps.cache-built-examples.outputs.cache-hit != 'true'
        run: apt install make

      - name: Build examples
        if: steps.cache-built-examples.outputs.cache-hit != 'true'
        run: make build.examples

  e2e-tests:
    strategy:
      fail-fast: false
      matrix:
        image: [ 
          "envoyproxy/envoy-dev:latest",
          "envoyproxy/envoy:v1.18.3",
          "envoyproxy/envoy:v1.19.0",
          "istio/proxyv2:1.9.7",
          "istio/proxyv2:1.10.3",
          "istio/proxyv2:1.11.0",
        ]
    name: E2E Test (${{ matrix.image }})
    needs: [build-examples]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      options: --privileged
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'

      - name: Print Envoy version
        run: envoy --version

      - name: Install Make
        run: apt update && apt install make

      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch built examples
        uses: actions/cache@v2
        with:
          path: examples
          key: examples-${{ hashFiles('examples/**', 'proxywasm/**') }}

      - name: Run e2e test
        run: make test.e2e
        env:
          CGO_ENABLED: "0"

  load-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          # payload-size: request body size in KB
          # qps: target QPS
          # duration: duration to run load test in seconds
          # target-example: target example WASM binary (e.g. "http_headers")
          - image: "envoyproxy/envoy:v1.19-latest"
            payload-size: 256
            qps: 100
            duration: 30
            target-example: "http_headers"
          - image: "envoyproxy/envoy:v1.19-latest"
            payload-size: 8192
            qps: 100
            duration: 30
            target-example: "http_headers"
    name: Load Test (${{ matrix.image }}, ${{ matrix.target-example }}, ${{ matrix.qps }} QPS, ${{ matrix.payload-size }} KB, ${{ matrix.duration }} s)
    needs: [build-examples]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      options: --privileged
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.5'

      - name: Print Envoy version
        run: envoy --version

      - name: Install Make
        run: apt update && apt install make

      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch built examples
        uses: actions/cache@v2
        with:
          path: examples
          key: examples-${{ hashFiles('examples/**', 'proxywasm/**') }}

      - name: Run load test
        run: make test.e2e.loadtest qps=${{ matrix.qps }} payloadSize=${{ matrix.payload-size }} duration=${{ matrix.duration }} targetExample=${{ matrix.target-example }}
        env:
          CGO_ENABLED: "0"
